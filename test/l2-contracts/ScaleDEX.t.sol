// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import 'forge-std/console.sol';
import {Test} from 'forge-std/Test.sol';


import {InputScalingHelperL2} from 'src/l2-contracts/InputScalingHelperL2.sol';
import {InputScalingHelper} from 'src/InputScalingHelper.sol';

contract ScaleDEXTest is Test {

  address alice;

  uint256 constant FORK_BLOCK_NUMBER = 187568451;
  address Router = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;

  InputScalingHelperL2 public scalel2;
  InputScalingHelper public scale;

  uint256 newAmount = 2048106;


  bytes callRouterData = hex'e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000010501020000003c000000eff23b4be1091b53205e35f3afcd9c7182bf3062ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000002c494202190000002d000000c6bc781e20f9323012f6e422bdf552ff06ba6cd1fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90102182f2a2543b76a4166549f7aab2e75bef0aefc5b0ffd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000005bbb0ef59571e58418f9a4357b68a00000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007060000000000000000000000006b2df7050000000000000000000000000000000000000000000000000000000000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000000000000000002c4942000000000000000000000000000000000000000000000000000000006aa4c66c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002c494200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f27b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313830302e3532333432353036222c22416d6f756e744f7574555344223a22313830332e35363839393234303639393938222c22526566657272616c223a22222c22466c616773223a332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22496a6132753670687972464e6f70466c587a717a684f623948504931533370612b33665052324354414e2f556c6b3951552b657a356141535a665858414b6c313477556f314f316f716759694444616f5a44614a7863367a6f5a67537964483350496173656b6e6752614637436d55736733496361696f7137644b2f5969394f553372374f6468454b786f753956366f5252487665397234315379445779344e6a3932434e71416658563677323732467047505a39516b454e31354e6554517752476c4638425550616256796d674f47646f43326f756776734d554f3749483236706b6139667a366664536f5a4364544e2f346a7445394f6c716c3134656343355030665a707876444e61397150425a536e4b7a493946515362347855363730335049646e33324b377a4c78666d73743135526a6a4459356445334f70304a766d42384d6757546e6639466341316b31456538796c773d3d227d7d0000000000000000000000000000';

  function setUp() public {
    _fork();

    alice = vm.addr(123);
    scale = new InputScalingHelper();
    scalel2 = new InputScalingHelperL2();

    vm.startPrank(alice);
  }

  function _fork() internal {
    vm.createSelectFork('arbitrum_mainnet', FORK_BLOCK_NUMBER);
  }

  function test_scale() public {
    bytes memory result = scalel2.getScaledInputData(callRouterData, newAmount);
    // bytes memory result = scale.getScaledInputData(callRouterData, newAmount);
  }
}
