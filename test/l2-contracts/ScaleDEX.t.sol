// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import 'forge-std/console.sol';
import {Test} from 'forge-std/Test.sol';

import {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';
import {InputScalingHelperL2} from 'src/l2-contracts/InputScalingHelperL2.sol';
import {InputScalingHelper} from 'src/InputScalingHelper.sol';

contract ScaleDEXTest is Test {

  address alice;
  address senderF1 =  0x8BA8fA6C088dEe78BbA8E226621f85541D60D683;
  address senderF =  0xDaae7AF729292f50376092A953C8CFeD7c442B28;

  // uint256 constant FORK_BLOCK_NUMBER = 187641367;
  uint256 constant FORK_BLOCK_NUMBER = 187641367;
  address Router = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;

  address DAI = 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1;
  address USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;
  address SYNC = 0x080F6AEd32Fc474DD5717105Dba5ea57268F46eb;


  InputScalingHelperL2 public scalel2;
  InputScalingHelper public scale;

  uint256 newAmount = 2048106;


  // error 1: over balance, scale down to swap
  bytes callRouterData = hex'e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000010501020000003c000000eff23b4be1091b53205e35f3afcd9c7182bf3062ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000002c494202190000002d000000c6bc781e20f9323012f6e422bdf552ff06ba6cd1fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90102182f2a2543b76a4166549f7aab2e75bef0aefc5b0ffd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000005bbb0ef59571e58418f9a4357b68a00000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007060000000000000000000000006b2df7050000000000000000000000000000000000000000000000000000000000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000000000000000002c4942000000000000000000000000000000000000000000000000000000006aa4c66c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002c494200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f27b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313830302e3532333432353036222c22416d6f756e744f7574555344223a22313830332e35363839393234303639393938222c22526566657272616c223a22222c22466c616773223a332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22496a6132753670687972464e6f70466c587a717a684f623948504931533370612b33665052324354414e2f556c6b3951552b657a356141535a665858414b6c313477556f314f316f716759694444616f5a44614a7863367a6f5a67537964483350496173656b6e6752614637436d55736733496361696f7137644b2f5969394f553372374f6468454b786f753956366f5252487665397234315379445779344e6a3932434e71416658563677323732467047505a39516b454e31354e6554517752476c4638425550616256796d674f47646f43326f756776734d554f3749483236706b6139667a366664536f5a4364544e2f346a7445394f6c716c3134656343355030665a707876444e61397150425a536e4b7a493946515362347855363730335049646e33324b377a4c78666d73743135526a6a4459356445334f70304a766d42384d6757546e6639466341316b31456538796c773d3d227d7d0000000000000000000000000000';
  
  // error 2: balance 0, can't swap
  bytes callRouterData2 = hex'e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000011201030000003d02000000500173f418137090dad96421811147b63b448a0fff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000005f5d48479122d350821b0000001a02000000c31e54c7a869b9fcbecc14363cf510d1c41fa44301010a0000001a020000002f5e87c9312fa29aed5c179e456625d79015299c01010ada10009cbd5d07dd0cecc66161fc93d7c9000da12f2a2543b76a4166549f7aab2e75bef0aefc5b0f00000000005bbb0ef59571e58418f9a4357b68a00000000000000000000000007fffffff00000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000002825df0000000000000000000000000000000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da10000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000005bbb0ef59571e58418f9a4357b68a000000000000000000000000000000000000000000000005f5d48479122d35082000000000000000000000000000000000000000000000000000000000027f27b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000005f5d48479122d3508200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f17b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313736302e39323135353035323330373237222c22416d6f756e744f7574555344223a22313736312e37303237353036222c22526566657272616c223a22222c22466c616773223a332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2246433972736a46544a39384356507251354d586f536664356d485069354e59536876566e4855364d38717575366a53412b597932456f6a63424a755456614d6530654852646f73697871316746302b6653345671336e76684743534f545754446575627a716a64444b50372b4b69555561383867465947633047316977506965594d45756b70537a694f773457524c53666964726339687a4670566357706a762b433365524c6f38502f4d4455462f3238576c4b566e554e67354f584667304c47735658486e456d4e5272617477473263664a4b2b417961767356727067594e5a59386973574e6b33655a7957426832574f765868784d427247326e4456524f6f4b2b5a5273304e6a792b5a41506e42646b65726c796a794871564c2f6a4c67683546586d656d5464597776487741417131426a57433169796355782f73456e716d544f5147634e7a707531424f6542444a483250773d3d227d7d000000000000000000000000000000';


  bytes callRouterSuccess = hex'e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000c7bbb021d72db4ffba37bdf4ef055eecdbc0a29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000aa0101000000530000002533dfe14568a2a43b438c79f456ae03423da2e4af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000b00000000000000000de0b6b3a76400000000000882af49447d8a07e3bd95bd0d56f35241523fbab1af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000bffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000c7bbb021d72db4ffba37bdf4ef055eecdbc0a2900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  
  function setUp() public {
    _fork();

    alice = vm.addr(123);
    scale = new InputScalingHelper();
    scalel2 = new InputScalingHelperL2();

    vm.startPrank(senderF1);
  }

  function _fork() internal {
    vm.createSelectFork('arbitrum_mainnet', FORK_BLOCK_NUMBER);
  }

  function test_call() public {
  //   console.log(IERC20(USDT).balanceOf(senderF));
    // (bool success, ) = Router.call(callRouterData);
  }


  function test_scale() public {
    bytes memory result = scalel2.getScaledInputData(callRouterData, newAmount);
    // bytes memory result = scale.getScaledInputData(callRouterData, newAmount);
  }
}
